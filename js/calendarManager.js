class CalendarManager {
    constructor() {
        this.setupEventListeners();
    }

    setupEventListeners() {
        const calendarBtn = document.getElementById('addToCalendarBtn');
        if (calendarBtn) {
            calendarBtn.addEventListener('click', () => this.openGoogleCalendar());
        }
    }

    openGoogleCalendar() {
        try {
            // Get detected dates from the meeting
            const dates = this.getDetectedDates();
            
            if (dates.length > 0) {
                // Use the first detected date/time
                const firstDate = dates[0];
                
                // Create calendar URL with event details
                const calendarUrl = this.createGoogleCalendarUrl({
                    title: firstDate.event || 'Meeting Event',
                    date: firstDate.date,
                    time: firstDate.time,
                    description: this.generateEventDescription()
                });

                // Open Google Calendar in new tab
                window.open(calendarUrl, '_blank');
            } else {
                // If no dates detected, open with current date/time
                const calendarUrl = this.createGoogleCalendarUrl({
                    title: 'Meeting Event',
                    description: this.generateEventDescription()
                });
                window.open(calendarUrl, '_blank');
            }
        } catch (error) {
            console.error('Error opening Google Calendar:', error);
            this.showError('Failed to open Google Calendar');
        }
    }

    getDetectedDates() {
        const dateItems = Array.from(document.querySelectorAll('.dates-list li'));
        return dateItems.map(item => ({
            event: item.querySelector('.item-content')?.textContent.trim(),
            date: item.querySelector('.date')?.textContent.replace('Date:', '').trim(),
            time: item.querySelector('.time')?.textContent.replace('Time:', '').trim()
        }));
    }

    generateEventDescription() {
        // Get action items
        const actionItems = Array.from(document.querySelectorAll('.action-list li'))
            .map(item => item.textContent.trim())
            .join('\n• ');

        // Get key points
        const keyPoints = Array.from(document.querySelectorAll('.key-points-list li'))
            .map(item => item.textContent.trim())
            .join('\n• ');

        // Get decisions
        const decisions = Array.from(document.querySelectorAll('.decisions-list li'))
            .map(item => item.textContent.trim())
            .join('\n• ');

        // Format description
        return `
Meeting Summary

ACTION ITEMS:
• ${actionItems}

KEY POINTS:
• ${keyPoints}

DECISIONS MADE:
• ${decisions}

Generated by Meeting Assistant
        `.trim();
    }

    createGoogleCalendarUrl({ title, date, time, description }) {
        // Default to current date/time if not provided
        const eventDateTime = this.parseDateTime(date, time) || new Date();
        const endDateTime = new Date(eventDateTime.getTime() + (60 * 60 * 1000)); // 1 hour duration

        const params = new URLSearchParams({
            action: 'TEMPLATE',
            text: title,
            details: description,
            dates: `${this.formatGoogleCalendarDate(eventDateTime)}/${this.formatGoogleCalendarDate(endDateTime)}`,
            ctz: Intl.DateTimeFormat().resolvedOptions().timeZone
        });

        return `https://calendar.google.com/calendar/render?${params.toString()}`;
    }

    parseDateTime(dateStr, timeStr) {
        if (!dateStr) return null;

        try {
            // Remove any "Date:" or "Time:" prefixes
            dateStr = dateStr.replace('Date:', '').trim();
            timeStr = timeStr?.replace('Time:', '').trim();

            // Parse the date string
            let dateTime;
            if (timeStr) {
                dateTime = new Date(`${dateStr} ${timeStr}`);
            } else {
                dateTime = new Date(dateStr);
            }

            return isNaN(dateTime) ? null : dateTime;
        } catch (error) {
            console.error('Error parsing date/time:', error);
            return null;
        }
    }

    formatGoogleCalendarDate(date) {
        // Format: YYYYMMDDTHHmmssZ
        return date.toISOString().replace(/[-:]/g, '').replace(/\.\d{3}/, '');
    }

    showError(message) {
        alert('Error: ' + message);
    }
}