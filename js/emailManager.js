class EmailManager {
    constructor() {
        this.setupEventListeners();
    }

    setupEventListeners() {
        // Share button
        const shareEmailBtn = document.getElementById('shareEmailBtn');
        if (shareEmailBtn) {
            shareEmailBtn.addEventListener('click', () => this.openGmailCompose());
        }
    }

    openGmailCompose() {
        try {
            // Get meeting summary
            const summary = this.generateEmailContent();
            
            // Create Gmail compose URL
            const gmailUrl = this.createGmailComposeUrl({
                subject: 'Meeting Summary',
                body: summary
            });

            // Open Gmail in new tab
            window.open(gmailUrl, '_blank');
        } catch (error) {
            console.error('Error opening Gmail:', error);
            this.showError('Failed to open Gmail');
        }
    }

    generateEmailContent() {
        // Get action items
        const actionItems = Array.from(document.querySelectorAll('.action-list li'))
            .map(item => item.textContent.trim())
            .join('\n• ');

        // Get key points
        const keyPoints = Array.from(document.querySelectorAll('.key-points-list li'))
            .map(item => item.textContent.trim())
            .join('\n• ');

        // Get decisions
        const decisions = Array.from(document.querySelectorAll('.decisions-list li'))
            .map(item => item.textContent.trim())
            .join('\n• ');

        // Get dates
        const dates = Array.from(document.querySelectorAll('.dates-list li'))
            .map(item => item.textContent.trim())
            .join('\n• ');

        // Get transcript
        const transcript = document.getElementById('liveTranscript').innerText.trim();

        // Format email content
        return `
Meeting Summary
${new Date().toLocaleString()}

ACTION ITEMS:
• ${actionItems}

KEY POINTS:
• ${keyPoints}

DECISIONS MADE:
• ${decisions}

IMPORTANT DATES:
• ${dates}

MEETING TRANSCRIPT:
${transcript}

Generated by Meeting Assistant
        `.trim();
    }

    createGmailComposeUrl({ subject, body }) {
        const params = new URLSearchParams({
            view: 'cm',  // compose mode
            fs: '1',     // full screen
            tf: '1',     // text format
            subject: subject,
            body: body
        });

        return `https://mail.google.com/mail/?${params.toString()}`;
    }

    showError(message) {
        alert('Error: ' + message);
    }
}